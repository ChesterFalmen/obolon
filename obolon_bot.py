import requests
import urllib3
import time
from datetime import datetime

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === Telegram ===
TELEGRAM_TOKEN = "7671763190:AAG_NUGU4ld6Av3DPgNN6CZt7klqNkGfZrI"
CHAT_IDS = ["-1002499902654", "509411504"]

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è ===
LOGIN_URL = "https://tms.obolon.ua/api/users/login"
LOGIN_PAYLOAD = {
    "local_ip_addr": "185.244.168.107",
    "user": "akro909",
    "password": "Akro909##"
}

# === –î–æ–∑–≤–æ–ª–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏ –∑–∞ f_code_id ===
ALLOWED_CODE_IDS = [8092, 1059, 23178]

# === API –û–±–æ–ª–æ–Ω—å ===
API_URL = "https://tms.obolon.ua/api/auction/trips?pageSize=100&page=1&fields=win_price,date_closed,fk_trips.full_weight,fk_trips.total_distance,fk_trips.multipoint,currency,date_start,driver,driver_document,f_name_auto,f_name_trailer,descr,time_in,time_delivery,cur_price,date_end,status,show_descr_for_user,f_code_trip,trip_type,start_price,max_price,logist_descr,fk_trip_type.label,fk_currency.code,fk_trips.f_code_trip,fk_trips.total_dist_auc,show_logist_descr_for_user,fk_trips.fk_trip_task.fk_task_org.f_name,fk_trips.fk_trip_task.dist,fk_trips.fk_trip_task.weight,fk_trips.fk_trip_car.f_code_id,fk_trips.fk_trip_car.f_number,fk_trips.fk_trip_car.f_name,manager_full_name,fk_closeator.value,fk_trips.fk_begin_addr.f_name,fk_trips.end_addr_name&filters=[[\"fk_trips.export\",\"eq\",0],[\"auc_type\",\"eq\",0],[\"status\",\"eq\",0],[\"in_queue\",\"eq\",0]]&default_sort=[[\"date_start\",\"DESC\"],[\"fk_trips.trip_id\",\"DESC\"]]"

sent_ids = set()
last_update_time = None
last_trip_count = 0
last_update_id = 0

def send_telegram_message(text, chat_id=None, reply_to_message_id=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    targets = [chat_id] if chat_id else CHAT_IDS

    for target_chat in targets:
        payload = {
            "chat_id": target_chat,
            "text": text
        }
        if reply_to_message_id:
            payload["reply_to_message_id"] = reply_to_message_id
        try:
            response = requests.post(url, data=payload)
            if response.status_code != 200:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ —á–∞—Ç {target_chat}:", response.text)
        except Exception as e:
            print(f"‚ùå Telegram Error –¥–ª—è {target_chat}:", e)

def check_for_status_command():
    global last_update_id

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    try:
        response = requests.get(url, params={"offset": last_update_id + 1})
        data = response.json()

        for update in data.get("result", []):
            last_update_id = update["update_id"]
            message = update.get("message", {})
            chat_id = message.get("chat", {}).get("id")
            text = message.get("text", "")
            message_id = message.get("message_id")

            if text.strip().lower() == "/status":
                reply = (
                    "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π\n"
                    f"üïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: 03.04 11:25\n"
                    f"üì¶ –ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–π—Å—ñ–≤: {last_trip_count}"
                )
                send_telegram_message(reply, chat_id=chat_id, reply_to_message_id=message_id)
    except Exception as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ /status:", e)

def login():
    session = requests.Session()
    try:
        response = session.post(LOGIN_URL, json=LOGIN_PAYLOAD, verify=False)
        response.raise_for_status()
        print("üîê –£—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ")
        return session
    except requests.exceptions.RequestException as e:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É:", e)
        return None

def take_trip(session, trip_data):
    trip_id = trip_data["id"]
    cur_price = trip_data["cur_price"]
    fk_trip_id = trip_data["fk_trips"]["trip_id"]
    url = f"https://tms.obolon.ua/api/auction/trips/update/{trip_id}"

    payload = {
        "id": trip_id,
        "cur_price": cur_price,
        "win_price": cur_price,
        "status": 1,
        "closeator": 65903,
        "manager_full_name": "–î—É–Ω–¥–∞ –Ñ–≤–≥–µ–Ω—ñ–π",
        "fk_currency": {"id": 1, "name": "–ì—Ä–∏–≤–Ω—è", "code": "UAH"},
        "fk_trips": {"trip_id": fk_trip_id}
    }

    try:
        response = session.post(url, json=payload, verify=False)
        if response.status_code == 200:
            print(f"‚úÖ –ó–∞—è–≤–∫—É {trip_id} —É—Å–ø—ñ—à–Ω–æ –≤–∑—è—Ç–æ!")
            send_telegram_message(f"‚úÖ –ó–∞—è–≤–∫–∞ {trip_id} —É—Å–ø—ñ—à–Ω–æ –≤–∑—è—Ç–∞!")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∑—è—Ç—Ç—è –∑–∞—è–≤–∫–∏ {trip_id}: {response.status_code}")
            print("üîç –í–º—ñ—Å—Ç:", response.text)
            send_telegram_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∑—è—Ç—Ç—è –∑–∞—è–≤–∫–∏ {trip_id}: {response.status_code}")
    except Exception as e:
        print("‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—ñ–¥ —á–∞—Å –≤–∑—è—Ç—Ç—è:", e)
        send_telegram_message(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—ñ–¥ —á–∞—Å –≤–∑—è—Ç—Ç—è –∑–∞—è–≤–∫–∏ {trip_id}")

def fetch_data(session):
    global last_update_time, last_trip_count

    try:
        response = session.get(API_URL, verify=False)
        if response.status_code == 401:
            print("üîÑ –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å. –ü–µ—Ä–µ–ª–æ–≥—ñ–Ω—é—î–º–æ—Å—å...")
            return None

        response.raise_for_status()
        trips = response.json().get("rows", [])
        #print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å—ñ–≤: {len(trips)}")

        last_update_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        last_trip_count = len(trips)

        for trip in trips:
            descr = (trip.get("logist_descr") or "").lower()
            trip_id = trip.get("f_code_trip")
            begin_code = trip.get("fk_trips", {}).get("fk_begin_addr", {}).get("f_code_id")

            if trip_id in sent_ids:
                continue

            if begin_code not in ALLOWED_CODE_IDS:
                continue

            if any(keyword in descr for keyword in ["–¥—Ä–æ–±–∏–Ω–∞", "—è—á–º—ñ–Ω—å", "–∂–∏—Ç–æ", "–∑–µ—Ä–Ω–æ–≤–æ–∑"]):
                try:
                    total_distance = trip.get("fk_trips", {}).get("total_distance", 0) or 0
                    cur_price = trip.get("cur_price", 0) or 0
                    pdv_price = cur_price * 1.2
                    calc_price = total_distance * 2.35 * 22

                    begin_name = trip.get("fk_trips", {}).get("fk_begin_addr", {}).get("f_name", "‚Äî")
                    end_city = trip.get("fk_trips", {}).get("end_addr_name", "‚Äî")

                    message = (
                        f"üöõ *–ù–æ–≤–∏–π —Ä–µ–π—Å –∑–Ω–∞–π–¥–µ–Ω–æ!*\n"
                        f"ID: {trip_id}\n"
                        f"–ó–≤—ñ–¥–∫–∏: {begin_name}\n"
                        f"–ö—É–¥–∏: {end_city}\n"
                        f"–û–ø–∏—Å: {trip.get('logist_descr') or '‚Äî'}\n"
                        f"–í—ñ–¥—Å—Ç–∞–Ω—å: {total_distance} –∫–º\n"
                        f"üì¶ –¶—ñ–Ω–∞ –∑ –ü–î–í: {round(pdv_price)} –≥—Ä–Ω\n"
                        f"üìê –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞: {round(calc_price)} –≥—Ä–Ω\n"
                    )

                    if calc_price <= pdv_price:
                        message += "‚úÖ –¶—ñ–Ω–∞ –ø–æ —Ñ–æ—Ä–º—É–ª—ñ <= –∑–∞ –ü–î–í ‚Äî –∑–∞—è–≤–∫–∞ –±—É–¥–µ –≤–∑—è—Ç–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏"
                        send_telegram_message(message)
                        print(f"üïí –û—á—ñ–∫—É—î–º–æ 4 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –≤–∑—è—Ç—Ç—è–º {trip_id}...")
                        time.sleep(4)
                        take_trip(session, trip)
                    else:
                        message += "‚ÑπÔ∏è –¶—ñ–Ω–∞ –ø–æ —Ñ–æ—Ä–º—É–ª—ñ –Ω–∏–∂—á–∞ ‚Äî –∑–∞—è–≤–∫—É –Ω–µ –±–µ—Ä–µ–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"
                        send_telegram_message(message)

                    sent_ids.add(trip_id)

                except Exception as e:
                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ–π—Å—É {trip_id}:", e)

        return session

    except requests.exceptions.RequestException as e:
        print("‚ùå Error fetching data:", e)
        return session


# === –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª ===
if __name__ == "__main__":
    session = login()
    print("–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è 03.04 11:25")
    while True:
        if session:
            result = fetch_data(session)
            if result is None:
                time.sleep(2)
                session = login()
        else:
            print("‚è≥ –û—á—ñ–∫—É—î–º–æ, –ø–æ–∫–∏ –ª–æ–≥—ñ–Ω —Å–ø—Ä–∞—Ü—é—î..")
            time.sleep(5)

        check_for_status_command()
        time.sleep(5)
